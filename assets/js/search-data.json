{
  
    
        "post0": {
            "title": "Day 1_ Javascript By Meta",
            "content": "Day 1: JavaScript By Meta . All Day Journey . This course is the second of a series that aims to help you learn more about web development. . In this course, you will explore the following: . Module 1: Introduction to JavaScript . In this module, you are introduced to JavaScript. You’ll learn why JavaScript is so integral to software development. And you’ll get an overview of how to write JavaScript code inside the browser. Furthermore, you will learn about the most common operators as well as conditional statements and loops. . After completing this module, you will be able to: . Explain the importance of JavaScript in software development . | Demonstrate how to write JavaScript code inside the browser . | Demonstrate how to write basic JavaScript code . | List common operators, conditional statements and loops . | Demonstrate how to use variables and output their value in the console . | . Module 2: The building blocks of a program . Here you’ll learn how to use objects, arrays and functions. In addition, you will learn about the most common built-in methods, and the difference between undefined, null and empty strings. And you’ll explore both error handling and defensive programming. . After completing this module, you will be able to: . Build and use objects, arrays, and functions . | List some common built-in methods on built-in objects . | Describe handling bugs and errors using try, catch, throw, and defensive programming . | Explain the difference between undefined, null, and empty strings . | Demonstrate how to write basic code using arrays, objects and functions . | . Module 3: Programming paradigms . This module is about functional programming and the object oriented programming paradigm. You will learn what scope is in JavaScript. You’ll explore the differences between var, let and const. And you’ll learn how to use classes and inheritance in object oriented programming. Additionally, you’ll explore how to use write JavaScript using modern features like spread and rest. You will build code that can manipulate the DOM and handle events. And you will use JSON in JavaScript. . After completing this module, you will be able to: . Outline the tenets of the functional programming and object oriented programming paradigm . | Describe how scope works in JavaScript . | List the differences between var, let, and const . | Use classes and inheritance in OOP in JavaScript . | Write JavaScript code using more modern features like spread, rest, template strings and modules . | Build code that manipulates the DOM and handles events . | Use JSON in JavaScript . | . Module 4: Testing and compatibility . Here you will learn about Node.js and npm. And you will explore how to install npm packages and how to work with package.json. Furthermore, you will learn about testing in JavaScript and you’ll code a simple unit test in Jest. . After completing this module, you will be able to: . Describe Node.js and npm . | Explain how to install npm packages . | Describe how to work with package.json . | Explain the process of testing in JavaScript . | List the three most prevalent kinds of testing . | Demonstrate how to code a simple unit test in Jest . | . Module 5: Graded assessment . In the final module, you’ll learn about the graded assessment. After you complete the individual units in this module, you’ll synthesize the skills you gained from the course to create code for the “Little lemon receipt maker “. . You’ll also have to opportunity to reflect on the course content and the learning path that lies ahead. . Introduction: . Javascript is the language of browsers. Nowadays frontend and backend can be coded in javascript. . Setting Up VS Code . Let us show what you are gonna learn in this topic. . . Search Visual Studio in google and go to Website to install it . | . Click on a file to complete the setup. . | . Start Doing setup . | . Create Icon . | . Open Visual Studio . | . Code Runner Extension . | . Install Node Js . | Create new file as Javascript . | Go to View and click on Terminal . | Drag Output to right . | Run your first program . |",
            "url": "https://hafizahmadhassan.github.io/Data-Science-Blog/2022/07/02/Day-1_-JavaScript-By-Meta.html",
            "relUrl": "/2022/07/02/Day-1_-JavaScript-By-Meta.html",
            "date": " • Jul 2, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Deployment Patterns",
            "content": "Deployment Patterns . When deployment number of use cases are there . Deployment vs maintenance . New product : speech recognition (small traffic and gradually increase) . | Automated deployment (Scratch detection) . | Replace previous ML System . | Key Ideas . In other words, rather than sending tons of traffic to a maybe not fully proven learning algorithm, you may send it only a small amount of traffic and monitor it and then ramp up the percentage or amount of traffic. . | you see a few times is rollback. Meaning that if for some reason the algorithm isn’t working, it’s nice if you can revert back to the previous system if indeed there was an earlier system . | Example . Smart phone defect detection . Shadow Mode : . | ML system shadows the human and runs in parallel . MLs output not used for any decisions . The use cases are shown below. . . In this case you gradually replace machine to decide instead of human to make decisions in future. . Canary Deployment: . | Select the traffic percentage may be 5 % and start let the algorithm make the real decisions. Running it on the small percentage of traffic. If algorithm makes mistake it will affect the small fraction . Give opportunity to monitor and ramp up traffic when you have confidence Used when you have large consequences . . Blue-Green Deployment . | Camera software collecting phone picture - send to piece of software - old version is blue and new one is green. In blue green - the router switch to new version suddenly - old prediction to new prediction service . The advantage is easy way to rollback (new to old one). . . Note : ML Ops Tools help to Implement the patterns . How to Deploy: . Think about degree of Automation - gradually increase the automation first it is human only and shadow mode then AI assistance and Partial automation where algo not sure about wether to say yes or not - so send to human . .",
            "url": "https://hafizahmadhassan.github.io/Data-Science-Blog/2022/07/01/Deployment-Patterns.html",
            "relUrl": "/2022/07/01/Deployment-Patterns.html",
            "date": " • Jul 1, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "  Week 2 Ml Production  1 (1)",
            "content": "Week 2-ML Production1 . This week we will be learning about modeling The cases when model Deployment is acceptable or not. . Model-centric Ai vs. Data-Centric In this week you will learn about both you will learn ways to improve data instead of collecting more and more data. . . Key Challenges . Let’s look AI system is = code +Data . . There are some models that are good enough from GitHub. . There are three inputs for developing an ML-Model. Most of the time we are focused on algorithms and Data. . General Process - Life Cycle . It is highly iterative process as most of the time you start with model+hyperparameters+data and do the training and error analysis and then improve. Its empirical process. Recommended to do-looping and save the states of model+hyper+data and select what you have achieved. . After you achieve a good model, you should do an error analysis to select audit performance. . . Challenges in Model Development . Check if it works well in train set . | If it works well in dev/test sets. . | Doing well on business metric/project goals. . | Step 2 depends on 1. Unfortunately, step 3 may not guaranteed by step 2. There is a lot of disagreement between the machine learning team and business stakeholders who cares about business metrics. . . Why Low Average Error is not Good Enough . It is possible the machine learning model performed well in the test set but may not be good enough for deployment purposes . Let’s say web searches have informational and transactional queries. Let’s say you want to see the apple pie recipe. Let us say a web search engine cant return you the best one. In that case, the user may forgive the engine . In other cases, the user has very clear intent and may not be forgiven for giving another result. Such as navigational queries . Stanford, Reddit, and Youtube . To summarize, the case where the user is fine with low average accuracy in informational queries may be acceptable, and very low errors in navigational queries is not acceptable for production. Check the user tolerance level. . . performance on key slices of the dataset. . EXAMPLE: ML FOR LOAN APPROVAL . It will depend on attributes—make sure not to discriminate by ethnicity, gender, location, language, or other protected attributes. . Many countries have regulations for loan approval attributes. A learning algorithm for loan approval is not acceptable for deployment if it will cause discrimination and bias. . AI community has a discussion about fairness . Another example: product recommendations from retailers. . Following is unacceptable : . It gives irrelevant recommendation of a specific ethnicity . | Considers large retailers and ignores small . | Lets say it does not recommend certain products such as electronics. . | How to carry out analysis on key slices of data? . You will learn soon stay tuned . . Rare Classes . Skewed data distribution-Medical Science-1% of patients have disease-need to select appropriate metric. Need to see accuracy on rare classes . We have specific conditions and its respective performanceIt is not acceptable to ignore Hernia.So In that case average test set accuracy is not required to be low. There can be the case if algorithm is always predict no can still acheive 90 percent accuracy. . . Average accuracy gives equal weightage to every example which is not acceptable in rare class cases. . Unfortunate conversation in many companies . Conversation can be below dont get offensive. Doing well in test set is not enough. What is actual business need? We need to do actual error analysis. In the next coming discussion we will see how to overcome these challenges. . .",
            "url": "https://hafizahmadhassan.github.io/Data-Science-Blog/2022/07/01/Week-2-ML-Production-1-(1).html",
            "relUrl": "/2022/07/01/Week-2-ML-Production-1-(1).html",
            "date": " • Jul 1, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "  Ml Production 2",
            "content": "Week 2-ML Production1 . This week we will be learning about modeling The cases when model Deployment is acceptable or not. . Model-centric Ai vs. Data-Centric In this week you will learn about both you will learn ways to improve data instead of collecting more and more data. . . Key Challenges . Let’s look AI system is = code +Data . . There are some models that are good enough from GitHub. . There are three inputs for developing an ML-Model. Most of the time we are focused on algorithms and Data. . General Process - Life Cycle . It is highly iterative process as most of the time you start with model+hyperparameters+data and do the training and error analysis and then improve. Its empirical process. Recommended to do-looping and save the states of model+hyper+data and select what you have achieved. . After you achieve a good model, you should do an error analysis to select audit performance. . . Challenges in Model Development . Check if it works well in train set . | If it works well in dev/test sets. . | Doing well on business metric/project goals. . | Step 2 depends on 1. Unfortunately, step 3 may not guaranteed by step 2. There is a lot of disagreement between the machine learning team and business stakeholders who cares about business metrics. . . Why Low Average Error is not Good Enough . It is possible the machine learning model performed well in the test set but may not be good enough for deployment purposes . Let’s say web searches have informational and transactional queries. Let’s say you want to see the apple pie recipe. Let us say a web search engine cant return you the best one. In that case, the user may forgive the engine . In other cases, the user has very clear intent and may not be forgiven for giving another result. Such as navigational queries . Stanford, Reddit, and Youtube . To summarize, the case where the user is fine with low average accuracy in informational queries may be acceptable, and very low errors in navigational queries is not acceptable for production. Check the user tolerance level. . . performance on key slices of the dataset. . EXAMPLE: ML FOR LOAN APPROVAL . It will depend on attributes—make sure not to discriminate by ethnicity, gender, location, language, or other protected attributes. . Many countries have regulations for loan approval attributes. A learning algorithm for loan approval is not acceptable for deployment if it will cause discrimination and bias. . AI community has a discussion about fairness . Another example: product recommendations from retailers. . Following is unacceptable : . It gives irrelevant recommendation of a specific ethnicity . | Considers large retailers and ignores small . | Lets say it does not recommend certain products such as electronics. . | How to carry out analysis on key slices of data? . You will learn soon stay tuned . . Rare Classes . Skewed data distribution-Medical Science-1% of patients have disease-need to select appropriate metric. Need to see accuracy on rare classes . We have specific conditions and its respective performanceIt is not acceptable to ignore Hernia.So In that case average test set accuracy is not required to be low. There can be the case if algorithm is always predict no can still acheive 90 percent accuracy. . . Average accuracy gives equal weightage to every example which is not acceptable in rare class cases. . Unfortunate conversation in many companies . Conversation can be below dont get offensive. Doing well in test set is not enough. What is actual business need? We need to do actual error analysis. In the next coming discussion we will see how to overcome these challenges. . .",
            "url": "https://hafizahmadhassan.github.io/Data-Science-Blog/2022/07/01/ML-Production-2.html",
            "relUrl": "/2022/07/01/ML-Production-2.html",
            "date": " • Jul 1, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "React and HTML",
            "content": "&lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;script src=&quot;https://unpkg.com/react@18/umd/react.development.js&quot; crossorigin&gt;&lt;/script&gt; &lt;script src=&quot;https://unpkg.com/react-dom@18/umd/react-dom.development.js&quot; crossorigin&gt;&lt;/script&gt; &lt;script src=&quot;https://unpkg.com/@babel/standalone/babel.min.js&quot;&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;div id = &quot;mydiv&quot;&gt;&lt;/div&gt; &lt;script type=&quot;text/babel&quot;&gt; function Hello(){ return &lt;h1&gt;Hello Hassan&lt;/h1&gt;; } ReactDOM.render(&lt;Hello/&gt;, docuement.getElementById(&#39;mydiv&#39;)) &lt;/script&gt; . &lt;script type=&quot;text/babel&quot;&gt; function Hassan() { return &lt;h1&gt;Hello Hassan!&lt;/h1&gt;; } ReactDOM.render(&lt;Hassan /&gt;, document.getElementById(&#39;mydiv&#39;)) &lt;/script&gt; . Pre-Reqs ES6 . Classes | Arrow Fuctions | . Class . &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;body&gt; &lt;script&gt; class Person { constructor(name,age) { this.name = name; this.age =age } } const hassan = new Person(&quot;My name is Hassan and age is &quot;,25); document.write(hassan.name,hassan.age); &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; . Arrow Function . function hello(){ return &quot;Hello World&quot; } . File &#34;&lt;ipython-input-1-9e1414d86da6&gt;&#34;, line 1 function hello(){ ^ SyntaxError: invalid syntax . hello =() =&gt; { return &quot;Hello World&quot; } # By Default hello =() =&gt; &quot;Hello World&quot; . &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;body&gt; &lt;h1&gt;Arrow Function&lt;/h1&gt; &lt;h2&gt;Implicit Return&lt;/h2&gt; &lt;p&gt;The arrow function expects a return value, and returns the value by default, without the &lt;strong&gt;return&lt;/strong&gt; keyword.&lt;/p&gt; &lt;p id=&quot;demo&quot;&gt;&lt;/p&gt; &lt;script&gt; hello = () =&gt; &quot;Hello World!&quot;; document.getElementById(&quot;demo&quot;).innerHTML = hello(); &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; . &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;script src=&quot;https://unpkg.com/react@18/umd/react.development.js&quot; crossorigin&gt;&lt;/script&gt; &lt;script src=&quot;https://unpkg.com/react-dom@18/umd/react-dom.development.js&quot; crossorigin&gt;&lt;/script&gt; &lt;script src=&quot;https://unpkg.com/@babel/standalone/babel.min.js&quot;&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;Arrow Function&lt;/h1&gt; &lt;h2&gt;Implicit Return&lt;/h2&gt; &lt;p&gt;The arrow function expects a return value, and returns the value by default, without the &lt;strong&gt;return&lt;/strong&gt; keyword.&lt;/p&gt; &lt;p id=&quot;demo&quot;&gt;&lt;/p&gt; &lt;div id =&quot;hassan&quot;&gt;&lt;/div&gt; &lt;script&gt; hello = () =&gt; &quot;Hello World!&quot;; document.getElementById(&quot;demo&quot;).innerHTML = hello(); &lt;/script&gt; &lt;script type=&quot;text/babel&quot;&gt; function hass(){ return &lt;h1&gt; Hi Hassan &lt;/h1&gt;; } ReactDOM.render(hass(), document.getElementById(&#39;hassan&#39;)) &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; .",
            "url": "https://hafizahmadhassan.github.io/Data-Science-Blog/2022/06/30/React_Day2.html",
            "relUrl": "/2022/06/30/React_Day2.html",
            "date": " • Jun 30, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "What is React",
            "content": "import React from &quot;react&quot;; import ReactDOM from &quot;react-dom/client&quot;; function Hello(props){ return &lt;h1&gt;Hello World&lt;/h1&gt; } const root = ReactDOM.createRoot(docuemnt.getElementById(&quot;root&quot;)); root.render(&lt;Hello/&gt;); .",
            "url": "https://hafizahmadhassan.github.io/Data-Science-Blog/2022/06/30/React_Day1.html",
            "relUrl": "/2022/06/30/React_Day1.html",
            "date": " • Jun 30, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Python Version Jupyter",
            "content": "Configure Jupyter Notebook With Python Version . How to Install multiple python Version and Enable jupyter notebook with Particular Version . First locate python directories | Ex. My case its in . usr/local/bin/python3 . usr/local/bin/python3.9 . I would suggest to use virtual environment and then configure python version with it . As I am selecting python3.9 . Pip install virtualenv . | virtualenv -p /usr/local/bin/python3.9 jup_env . | source jup_env/bin/activate . | jupyter notebook –allow-root . | Then type jupyter notebook in terminal. Verify version by writing !python –version in cell. .",
            "url": "https://hafizahmadhassan.github.io/Data-Science-Blog/2022/06/13/Python-Version-Jupyter.html",
            "relUrl": "/2022/06/13/Python-Version-Jupyter.html",
            "date": " • Jun 13, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Aws Instance Setting",
            "content": "Documentation of Setting Up EC2 Instance . - How to set EC2 virtual environment *(WARNING: Don’t follow course.fastai.ec2 setup instructions)* . 1) Create EC2 instance with g4dn.xlarge by selecting options . 2) Remember to use ubuntu version 20.4 not 22.0 because of dependency issues . 3) Don’t delete your key pair which you have chosed for particular instance in your local machine . 4) So your instance is ready . 5) Remember selecting at least 100 GB volume while creating instance . 6) You have started the amazon server in your terminal by doing ssh -i &lt;name of pm file&gt; ubuntu @ &lt;public ipv4 dns &gt; . 7) Do the following in terminal : . sudo apt update &amp;&amp; sudo apt -y install git . git clone https://github.com/fastai/fastsetup.git . cd fastsetup . sudo ./ubuntu-initial.sh . 8) And then write exit or logout in terminal to disconnect from amazon . 9) Then eneter the comman in local terminal . ssh -L localhost:8888:localhost:8888 -i &lt;name of pemfile&gt; ubuntu@&lt;public ipv4 Dns&gt; . 10) Make sure of the directory of the pem file path . *(No you are connected to amazon terminal)* . 11) Do the following &lt;amazon ec2 terminal&gt;: . cd fastsetup . ./setup-conda.sh . source ~/.bashrc . 12) Do not enter the following as described in course.fast.ai: . conda install -yq mamba . 13) Now setup your nvidia-drivers: . ubuntu-drivers devices . 14) You have to look at recommended drivers version and then install it . sudo apt-fast install -y nvidia-driver-&lt;recommended driver version&gt;-server . 15) Make sure you install nvidia driver successfully . 16) Enter the following commands: . sudo modprobe nvidia . nvidia-smi . 17) Now time to install fastai libraries. *REMEMBER TO DO IT WITH pip NOT conda/mamba* . pip –upgrade pip . pip install fastai . pip install -uqq fastbook . pip install graphvis . pip install notebook . 18) Enter the following: . cd . git clone https://github.com/fastai/fastbook . 19) Run jupyter notebook: jupyter notebook . 20) Type localhost:8888 in your browser. . 21) If it is not connected open the new terminal and type following: . ssh -L localhost:8888:localhost:8888 -i &lt;pemfile&gt; ubuntu@&lt;public ipv4 Dns&gt; . *Email us if you are facing issues* .",
            "url": "https://hafizahmadhassan.github.io/Data-Science-Blog/2022/06/10/AWS-Instance-Setting.html",
            "relUrl": "/2022/06/10/AWS-Instance-Setting.html",
            "date": " • Jun 10, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Lec_1_what_is_probabliity V2",
            "content": "Lec# 1 : What is Probablistic Modeling . Part 1 . Probob Model : . Quantitative description of situation, phenomenon or expereimrnt who outcome is uncertain . Involves Two Steps . Possible outcomes ? Sample Space . | Probability Laws ? rules to assign outcomes — Basic Laws/properties to be staisfy : Axioms e.g probs cant be negative . | Note : there will be very few axioms, but they are powerful, and we will see that they have lots of consequences. We will see that they imply many other properties that were not part of the axioms. . 1. 2: What is Sample space . Sample Space : description of possible outcomes . Set/ Sample Space (Denoted With Omega) , which has a more formal mathematical meaning. (List of all possible outcomes e.g Coin -2, Dice -Rolls 1 time then we have 6. . Properties . Mutually Exclusive. – No more than 2 outcomes happened in the end . | Collectively Exhaustive. – No matter you will be able to point one of outcome and say that is occurred . | Summarize : this set should be such that, at the end of the experiment, you should be always able to point to one, and exactly one, of the possible outcomes and say that this is the outcome that occurred. . | .",
            "url": "https://hafizahmadhassan.github.io/Data-Science-Blog/2021/08/30/Lec_1_What_is_Probabliity-v2.html",
            "relUrl": "/2021/08/30/Lec_1_What_is_Probabliity-v2.html",
            "date": " • Aug 30, 2021"
        }
        
    
  
    
        ,"post9": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://hafizahmadhassan.github.io/Data-Science-Blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post10": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://hafizahmadhassan.github.io/Data-Science-Blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://hafizahmadhassan.github.io/Data-Science-Blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://hafizahmadhassan.github.io/Data-Science-Blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}